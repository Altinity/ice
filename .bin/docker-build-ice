#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "${BASH_SOURCE[0]}")/.."

test -n "$VERSION" || (echo "VERSION env variable must be set" >&2; exit 1)
IMAGE_TAG="${IMAGE_TAG:-$VERSION}"

if [[ "${SKIP_VERIFY:-}" != "1" ]]; then
  ./mvnw -pl ice validate # fail-fast
fi

image_name=altinity/ice

# TODO: s/latest/nonroot
docker build --platform linux/amd64 --build-arg "BASE_IMAGE_TAG=latest-amd64" --build-arg "VERSION=$VERSION" \
  -t "$image_name:$IMAGE_TAG-amd64" -f ice/Dockerfile .
docker build --platform linux/arm64 --build-arg "BASE_IMAGE_TAG=latest-arm64" --build-arg "VERSION=$VERSION" \
  -t "$image_name:$IMAGE_TAG-arm64" -f ice/Dockerfile .

docker build --platform linux/amd64 --build-arg "BASE_IMAGE_TAG=debug-amd64" --build-arg "VERSION=$VERSION" \
  -t "$image_name:debug-$IMAGE_TAG-amd64" -f ice/Dockerfile.debug .
docker build --platform linux/arm64 --build-arg "BASE_IMAGE_TAG=debug-arm64" --build-arg "VERSION=$VERSION" \
  -t "$image_name:debug-$IMAGE_TAG-arm64" -f ice/Dockerfile.debug .

push=false
for arg in "$@"; do
  if [[ "$arg" == "--push" ]]; then
    push=true
    break
  fi
done
if ! $push; then
  echo >&2 'Skipping docker push (--push not set)'
  exit 0
fi

for q in "" "debug-"; do
  docker push "$image_name:$q$IMAGE_TAG-amd64"
  docker push "$image_name:$q$IMAGE_TAG-arm64"
  # `docker manifest` requires metadata from the registry, hence the `docker push`es above
  docker manifest create "$image_name:$q$IMAGE_TAG" \
    --amend "$image_name:$q$IMAGE_TAG-amd64" \
    --amend "$image_name:$q$IMAGE_TAG-arm64"
  docker manifest push --purge "$image_name:$q$IMAGE_TAG"
done

regctl image copy "$image_name:$IMAGE_TAG" "$image_name:latest"
regctl image copy "$image_name:debug-$IMAGE_TAG" "$image_name:debug"
